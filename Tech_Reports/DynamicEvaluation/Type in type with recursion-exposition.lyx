#LyX 2.3 created this file. For more info see http://www.lyx.org/
\lyxformat 544
\begin_document
\begin_header
\save_transient_properties true
\origin unavailable
\textclass article
\use_default_options true
\maintain_unincluded_children false
\language english
\language_package default
\inputencoding auto
\fontencoding global
\font_roman "default" "default"
\font_sans "default" "default"
\font_typewriter "default" "default"
\font_math "auto" "auto"
\font_default_family default
\use_non_tex_fonts false
\font_sc false
\font_osf false
\font_sf_scale 100 100
\font_tt_scale 100 100
\use_microtype false
\use_dash_ligatures true
\graphics default
\default_output_format default
\output_sync 0
\bibtex_command default
\index_command default
\paperfontsize default
\use_hyperref false
\papersize default
\use_geometry false
\use_package amsmath 1
\use_package amssymb 1
\use_package cancel 1
\use_package esint 1
\use_package mathdots 1
\use_package mathtools 1
\use_package mhchem 1
\use_package stackrel 1
\use_package stmaryrd 1
\use_package undertilde 1
\cite_engine basic
\cite_engine_type default
\biblio_style plain
\use_bibtopic false
\use_indices false
\paperorientation portrait
\suppress_date false
\justification true
\use_refstyle 1
\use_minted 0
\index Index
\shortcut idx
\color #008000
\end_index
\secnumdepth 3
\tocdepth 3
\paragraph_separation indent
\paragraph_indentation default
\is_math_indent 0
\math_numbering_side default
\quotes_style english
\dynamic_quotes 0
\papercolumns 1
\papersides 1
\paperpagestyle default
\tracking_changes false
\output_changes false
\html_math_output 0
\html_css_as_file 0
\html_be_strict false
\end_header

\begin_body

\begin_layout Title
an Intensional Dependent Type Theory with Type-in-Type and Recursion
\end_layout

\begin_layout Section
Examples
\end_layout

\begin_layout Subsection
Pretending 
\begin_inset Formula $\star=_{\star}\perp$
\end_inset


\end_layout

\begin_layout Standard
spoofing an equality
\end_layout

\begin_layout Standard
\begin_inset Formula $\left(\lambda pr:\left(\star=_{\star}\perp\right).pr\,\left(\lambda x.x\right)\,\perp\qquad:\lnot\star=_{\star}\perp\right)refl_{\star:\star}$
\end_inset


\end_layout

\begin_layout Standard
elaborates to
\end_layout

\begin_layout Standard
\begin_inset Formula $\left(\lambda pr:\left(\star=_{\star}\perp\right).pr\,\left(\lambda x.x\right)\,\perp\qquad:\lnot\star=_{\star}\perp\right)\left(refl_{\star:\star}::\left(\star=_{\star}\star\right)=_{l}\left(\star=_{\star}\perp\right)\right)$
\end_inset


\end_layout

\begin_layout Standard
\begin_inset Formula $refl_{\star:\star}::\left(\star=_{\star}\star\right)=_{l}\left(\star=_{\star}\perp\right)\,\left(\lambda x.x\right)\,\perp\qquad:\perp$
\end_inset


\end_layout

\begin_layout Standard
\begin_inset Formula $\left(\lambda C:\left(\star\rightarrow\star\right).\lambda x:C\,\star.x::\left(\varPi C:\left(\star\rightarrow\star\right).C\,\star\rightarrow C\,\star\right)=_{l}\left(\varPi C:\left(\star\rightarrow\star\right).C\,\star\rightarrow C\,\perp\right)\right)\,\left(\lambda x.x\right)\,\perp\qquad:\perp$
\end_inset


\end_layout

\begin_layout Standard
\begin_inset Formula $\left(\lambda x:\star.x::\left(\star\rightarrow\star\right)=_{l,bod}\left(\star\rightarrow\perp\right)\right)\,\perp\qquad:\perp$
\end_inset


\end_layout

\begin_layout Standard
\begin_inset Formula $\left(\perp::\star=_{l,bod.bod}\perp\right)\qquad:\perp$
\end_inset


\end_layout

\begin_layout Standard
note that the program has not yet 
\begin_inset Quotes eld
\end_inset

gotten stuck
\begin_inset Quotes erd
\end_inset

.
 to exercise this error, 
\begin_inset Formula $\perp$
\end_inset

 must be eliminated, this can be done by tying to summon another type by
 applying it to 
\begin_inset Formula $\perp$
\end_inset

 
\end_layout

\begin_layout Standard
\begin_inset Formula $\left(\left(\perp::\star=_{l,bod.bod}\perp\right)\qquad:\perp\right)\,\star$
\end_inset


\end_layout

\begin_layout Standard
\begin_inset Formula $\left(\left(\varPi x:\star.x\right)::\star=_{l,bod.bod}\left(\varPi x:\star.x\right)\right)\,\star$
\end_inset


\end_layout

\begin_layout Standard
the computation is stuck, and the original application can be blamed on
 account that the 
\begin_inset Quotes eld
\end_inset

proof
\begin_inset Quotes erd
\end_inset

 has a discoverable type error at the point of application 
\begin_inset Formula $l$
\end_inset


\end_layout

\begin_layout Standard
\begin_inset Formula $\varPi C:\left(\star\rightarrow\star\right).C\,\star\rightarrow\underline{C\,\star}\neq\varPi C:\left(\star\rightarrow\star\right).C\,\star\rightarrow\underline{C\,\perp}$
\end_inset


\end_layout

\begin_layout Standard
when 
\end_layout

\begin_layout Standard
\begin_inset Formula $C\coloneqq\lambda x.x$
\end_inset


\end_layout

\begin_layout Standard
\begin_inset Formula $C\,\perp=\perp\neq\star=C\,\star$
\end_inset


\end_layout

\begin_layout Subsection
Pretending 
\begin_inset Formula $true_{c}=_{\mathbb{B}_{c}}false_{c}$
\end_inset


\end_layout

\begin_layout Standard
spoofing an equality, evaluating 
\begin_inset Formula $\lnot true_{c}=_{\mathbb{B}_{c}}false_{c}$
\end_inset

 with an incorrect proof.
\end_layout

\begin_layout Standard
\begin_inset Formula $\left(\lambda pr:\left(\varPi C:\left(\mathbb{B}_{c}\rightarrow\star\right).C\,true_{c}\rightarrow C\,false_{c}\right).pr\,\left(\lambda b:\mathbb{B}_{c}.b\,\star\,\star\,\perp\right)\,\perp\qquad:\lnot true_{c}=_{\mathbb{B}_{c}}false_{c}\right)refl_{true_{c}:\mathbb{B}_{c}}$
\end_inset


\end_layout

\begin_layout Standard
is elaborated to
\end_layout

\begin_layout Standard
\begin_inset Formula $\left(\lambda pr:\left(\varPi C:\left(\mathbb{B}_{c}\rightarrow\star\right).C\,true_{c}\rightarrow C\,false_{c}\right).pr\,\left(\lambda b:\mathbb{B}_{c}.b\,\star\,\star\,\perp\right)\,\perp\qquad:\lnot true_{c}=_{\mathbb{B}_{c}}false_{c}\right)\left(refl_{true_{c}:\mathbb{B}_{c}}::true_{c}=_{\mathbb{B}_{c}}true_{c}=_{l}true_{c}=_{\mathbb{B}_{c}}false_{c}\right)$
\end_inset


\end_layout

\begin_layout Standard
\begin_inset Formula $\left(refl_{true_{c}:\mathbb{B}_{c}}::true_{c}=_{\mathbb{B}_{c}}true_{c}=_{l}true_{c}=_{\mathbb{B}_{c}}false_{c}\right)\,\left(\lambda b:\mathbb{B}_{c}.b\,\star\,\star\,\perp\right)\,\perp$
\end_inset


\end_layout

\begin_layout Standard
\begin_inset Formula $\left(\left(\lambda C:\left(\mathbb{B}_{c}\rightarrow\star\right).\lambda x:C\,true_{c}.x\right)::\varPi C:\left(\mathbb{B}_{c}\rightarrow\star\right).C\,true_{c}\rightarrow C\,true_{c}=_{l}\varPi C:\left(\mathbb{B}_{c}\rightarrow\star\right).C\,true_{c}\rightarrow C\,false_{c}\right)\,\left(\lambda b:\mathbb{B}_{c}.b\,\star\,\star\,\perp\right)\,\perp$
\end_inset


\end_layout

\begin_layout Standard
\begin_inset Formula $\left(\left(.\lambda x:\star.x\right)::\star\rightarrow\star=_{l,bod}\star\rightarrow\perp\right)\,\perp$
\end_inset


\end_layout

\begin_layout Standard
\begin_inset Formula $\left(\perp::\star=_{l,bod.bod}\perp\right)$
\end_inset


\end_layout

\begin_layout Standard
As in the above the example has not yet 
\begin_inset Quotes eld
\end_inset

gotten stuck
\begin_inset Quotes erd
\end_inset

.
 As above, applying 
\begin_inset Formula $\star$
\end_inset

 will discover the error, which would result in an error like 
\end_layout

\begin_layout Standard
\begin_inset Formula $\varPi C:\left(\mathbb{B}_{c}\rightarrow\star\right).C\,true_{c}\rightarrow\underline{C\,true_{c}}\neq\varPi C:\left(\mathbb{B}_{c}\rightarrow\star\right).C\,false_{c}\rightarrow\underline{C\,false_{c}}$
\end_inset


\end_layout

\begin_layout Standard
when 
\end_layout

\begin_layout Standard
\begin_inset Formula $C\coloneqq\lambda b:\mathbb{B}_{c}.b\,\star\,\star\,\perp$
\end_inset


\end_layout

\begin_layout Standard
\begin_inset Formula $C\,true_{c}=\perp\neq\star=C\,false_{c}$
\end_inset


\end_layout

\begin_layout Section
Data problems
\end_layout

\begin_layout Standard
The only way to induce a type soundness error is by feeding the functions
 more functions until they get stuck.
 This indirection means that we cannot say 
\begin_inset Quotes eld
\end_inset


\begin_inset Formula $\underline{C\,\star}\neq\underline{C\,\perp}$
\end_inset

 since 
\begin_inset Formula $\star\neq\perp$
\end_inset


\begin_inset Quotes erd
\end_inset

 without giving a value to C.
 This means that we can't observe term level differences directly.
\end_layout

\begin_layout Standard
The solution is likely to add dependent data where the motive can observe
 type level issues via term computation and case elimination observes data
 constructor discrepancies.
\end_layout

\begin_layout Standard
consider some data with 
\end_layout

\begin_layout Standard
\begin_inset Formula $T:\mathbb{N}\rightarrow\mathbb{N}\rightarrow\mathbb{N}\rightarrow\star$
\end_inset


\end_layout

\begin_layout Standard
and some data constructor
\end_layout

\begin_layout Standard
\begin_inset Formula $D:\left(x:\mathbb{N}\right)\rightarrow\left(y:\mathbb{N}\right)\rightarrow\left(z:\mathbb{N}\right)\rightarrow T\,x\,y\,z$
\end_inset


\end_layout

\begin_layout Standard
and an elimination like
\end_layout

\begin_layout Standard
\begin_inset Formula 
\begin{align*}
case\,\left(D\,0\,1\,0\,:T\,0\,1\,0\right) & ::T\,0\,0\,0\,<-:T\,x\,y\,z.\,case\,x+y+z\,of\,0.\,\mathbb{N}\rightarrow\mathbb{N}\,|\,-.\star>\,of\\
D\,x\,y\,z & .case\,x+y+z\,<...>\,of\,0.\,\lambda x.x\,|\,-.\star
\end{align*}

\end_inset


\end_layout

\begin_layout Standard
this term should have the apparent type of 
\end_layout

\begin_layout Standard
\begin_inset Formula $\mathbb{N}\rightarrow\mathbb{N}$
\end_inset


\end_layout

\begin_layout Standard
the goal is to track the problem to the 2nd position of 
\begin_inset Formula $T$
\end_inset

 when the expression in normalized, by computing the motive at runtime.
\end_layout

\begin_layout Standard
While this problem seems easy we need to consider all possibilities for
 the syntax.
 For instance:
\end_layout

\begin_layout Itemize
\begin_inset Formula $T:\left(\mathbb{N}\rightarrow\mathbb{N}\right)\rightarrow\left(\mathbb{N}\rightarrow\mathbb{N}\right)\rightarrow\left(\mathbb{N}\rightarrow\mathbb{N}\right)\rightarrow\star$
\end_inset

, needs to support observing functions directly by application (rather then
 inspecting 
\begin_inset Formula $\varPi$
\end_inset

 under assumption)
\end_layout

\begin_layout Itemize
\begin_inset Formula $T:\left(\mathbb{N}*\left(\mathbb{N}*\mathbb{N}\right)\right)\rightarrow\star$
\end_inset

 , data constructors can be embedded in types, so they should also be inspected
\end_layout

\begin_layout Itemize
\begin_inset Formula $T:\left(A:\star\right)\rightarrow A\rightarrow A\rightarrow\star$
\end_inset

 , full dependent typing
\end_layout

\begin_layout Standard
Further we should expect that 
\end_layout

\begin_layout Itemize
Normalization 
\begin_inset Quotes eld
\end_inset

preserves
\begin_inset Quotes erd
\end_inset

 the apparent type.
\end_layout

\begin_layout Itemize
the direct scrutinee same as is compatible with the typing of the motive.
 
\end_layout

\begin_deeper
\begin_layout Itemize
for instance 
\begin_inset Formula $case\,\left(D\,0\,1\,0\,:T\,0\,1\,0\right)::T\,0\,0\,0\,<\underline{a}:T\,\underline{x}\,\underline{y}\,\underline{z}.\,M>\,$
\end_inset

 
\end_layout

\begin_deeper
\begin_layout Itemize
Then the apparent type is 
\begin_inset Formula $M\left[a\coloneqq\left(D\,0\,1\,0\,:T\,0\,1\,0\right)::T\,0\,0\,0,x\coloneqq0,y\coloneqq1,z\coloneqq0\right]$
\end_inset


\end_layout

\end_deeper
\end_deeper
\begin_layout Standard
Finally remember that not all casts will be available until the entire expressio
n can be eliminated:
\end_layout

\begin_layout Standard
\begin_inset Formula 
\begin{align*}
case\,\left(\left(\lambda x.\left(D\,0\,x\,0\,:T\,0\,x\,0\right)\right)1\right) & ::T\,0\,0\,0\,<x:T\,x\,y\,z.\,case\,x+y+z\,of\,0.\,\mathbb{N}\rightarrow\mathbb{N}\,|\,-.\star>\,of\\
D\,x\,y\,z & .case\,x+y+z\,<...>\,of\,0.\,\lambda x.x\,|\,-.\star
\end{align*}

\end_inset


\end_layout

\begin_layout Standard
At this point a number of mediocre solutions have been considered
\end_layout

\begin_layout Subsection
Big Stack
\end_layout

\begin_layout Standard
on possibility is to expand the stack on elimination, interpolating between
 different positions
\end_layout

\begin_layout Standard
so for instance the if 
\begin_inset Formula $\left(D\,1\,2\,3\,:T\,1\,2\,3::T\,4\,5\,6::T\,7\,8\,9\right)$
\end_inset

 could project into the motive 
\begin_inset Formula $<\underline{a}:T\,\underline{x}\,\underline{y}\,\underline{z}.\,M>$
\end_inset


\end_layout

\begin_layout Standard
\begin_inset Formula $\begin{array}{ccccccccc}
M[a\coloneqq & D\,1\,2\,3\,:T\,1\,2\,3::T\,4\,5\,6::T\,7\,8\,9 & ,x\coloneqq & 7 & ,y\coloneqq & 8 & ,z\coloneqq & 9 & ]\\
M[a\coloneqq & D\,1\,2\,3\,:T\,1\,2\,3::T\,4\,5\,6::T\,7\,8\,6 & ,x\coloneqq & 7 & ,y\coloneqq & 8 & ,z\coloneqq & 6 & ]\\
M[a\coloneqq & D\,1\,2\,3\,:T\,1\,2\,3::T\,4\,5\,6::T\,7\,5\,6 & ,x\coloneqq & 7 & ,y\coloneqq & 5 & ,z\coloneqq & 6 & ]\\
M[a\coloneqq & D\,1\,2\,3\,:T\,1\,2\,3::T\,4\,5\,6 & ,x\coloneqq & 4 & ,y\coloneqq & 5 & ,z\coloneqq & 6 & ]\\
M[a\coloneqq & D\,1\,2\,3\,:T\,1\,2\,3::T\,4\,5\,3 & ,x\coloneqq & 4 & ,y\coloneqq & 5 & ,z\coloneqq & 3 & ]\\
M[a\coloneqq & D\,1\,2\,3\,:T\,1\,2\,3::T\,4\,2\,3 & ,x\coloneqq & 4 & ,y\coloneqq & 2 & ,z\coloneqq & 3 & ]\\
M[a\coloneqq & D\,1\,2\,3\,:T\,1\,2\,3 & ,x\coloneqq & 1 & ,y\coloneqq & 2 & ,z\coloneqq & 3 & ]
\end{array}$
\end_inset


\end_layout

\begin_layout Standard
This method has the advantage that 
\end_layout

\begin_layout Itemize
the apparent type of the scrutinee matches the collected type annotations
\end_layout

\begin_layout Itemize
the apparent type is stable under evaluation
\end_layout

\begin_layout Standard
Unfortunately 
\end_layout

\begin_layout Itemize
this doesn't seem to naturally handle cases of nested type type constructors
 or data constructors (these could also be expanded)
\end_layout

\begin_layout Itemize
this doesn't seem to handle cases of nested function type
\end_layout

\begin_layout Itemize
though each step is only linear it is easy to imagine these compounded linear
 expansions being far too slow
\end_layout

\begin_layout Subsection
Remember and Peek
\end_layout

\begin_layout Standard
As an alternative to preemptively expanding the stack each time, we can
 thunk the information needed and then lazily expand the stack later, when
 needed.
\end_layout

\begin_layout Standard
It has all the downsides of the 
\begin_inset Quotes eld
\end_inset

big stack approach
\begin_inset Quotes erd
\end_inset

 except a little more efficient (but still very inefficient)
\end_layout

\begin_layout Itemize
doesn't seem to naturally handle cases of nested type type constructors
 or data constructors (these could also be expanded)
\end_layout

\begin_layout Itemize
doesn't seem to handle cases of nested function type
\end_layout

\begin_layout Standard
the theory becomes very messy
\end_layout

\begin_layout Standard
An earlier version of the implementation used this, it was pretty buggy
\end_layout

\begin_layout Subsection
\begin_inset Quotes eld
\end_inset

non-determinism
\begin_inset Quotes erd
\end_inset


\end_layout

\begin_layout Standard
an alternative would to embed the possible non-determinism into the cast
 syntax.
 This seams closer to the intended meaning.
 So for instance, 
\begin_inset Formula $\left(D\,1\,2\,3\,:T\,1\,2\,3::T\,4\,5\,6::T\,7\,8\,9\right)$
\end_inset

 could project into the motive 
\begin_inset Formula $<\underline{a}:T\,\underline{x}\,\underline{y}\,\underline{z}.\,M>$
\end_inset

 with 
\begin_inset Formula $M\left[a\coloneqq\left(D\,1\,2\,3\,:T\,1\,2\,3::T\,4\,5\,6::T\,7\,8\,9\right),x\coloneqq\left\{ 7,4,1\right\} ,y\coloneqq\left\{ 8,5,2\right\} ,z\coloneqq\left\{ 9,6,3\right\} \right]$
\end_inset

.
 
\end_layout

\begin_layout Standard
This approach has the advantage that terms are handled naturally, and 
\end_layout

\begin_layout Itemize
it is easy to see how to project blame out of
\end_layout

\begin_deeper
\begin_layout Itemize
functions 
\begin_inset Formula $\left\{ \lambda x.x,\lambda-.0\right\} \,1$
\end_inset

 
\end_layout

\begin_layout Itemize
data 
\begin_inset Formula $case\,\left\{ s\,\left(s\,0\right),0\right\} \,...$
\end_inset

 
\end_layout

\end_deeper
\begin_layout Itemize
it would be easy to increase the conservativity of runtime checking
\end_layout

\begin_layout Itemize
it seems possible to see how non-determinism can be optimized out of terms
 for some value syntax
\end_layout

\begin_deeper
\begin_layout Itemize
\begin_inset Formula $\left\{ 7,7,7\right\} $
\end_inset

 = 7 
\end_layout

\begin_layout Itemize
\begin_inset Formula $\left\{ \lambda x.x,\lambda-.0\right\} $
\end_inset

 =
\begin_inset Formula $\lambda x.\left\{ x,0\right\} $
\end_inset


\end_layout

\end_deeper
\begin_layout Standard
However there are issues with this formulation
\end_layout

\begin_layout Itemize
Like casts, it seems best to fix the non-determinism against head terms,
 to avoid superfluous syntax.
 
\end_layout

\begin_deeper
\begin_layout Itemize
\begin_inset Formula $\left\{ 7,\left\{ \left\{ 7,\left\{ 7,7\right\} \right\} ,\left\{ 7,7\right\} \right\} \right\} $
\end_inset


\end_layout

\end_deeper
\begin_layout Itemize
the type must be consistent over formalization this leads to something like
 a 2 dimensional terms
\end_layout

\begin_deeper
\begin_layout Itemize
like
\end_layout

\begin_deeper
\begin_layout Itemize
\begin_inset Formula $\left\{ 7:\mathbb{N}::\mathbb{N},7:\mathbb{N}::\mathbb{B}::\mathbb{N},true:\mathbb{B}::\mathbb{N}\right\} $
\end_inset


\end_layout

\begin_layout Itemize
\begin_inset Formula $\left\{ 7:\mathbb{N}::\mathbb{N},7:\mathbb{N}::\mathbb{B}::\mathbb{N}\right\} $
\end_inset


\end_layout

\begin_layout Itemize
...
\end_layout

\end_deeper
\end_deeper
\begin_layout Itemize
motives don't compute straightforwardly,
\begin_inset Formula 
\begin{align*}
case\,\left(D\,0\,1\,0\,:T\,0\,1\,0\right) & ::T\,0\,0\,0\,<-:T\,x\,y\,z.\,case\,x+y+z\,of\,0.\,\mathbb{N}\rightarrow\mathbb{N}\,|\,-.\star>\,of\\
D\,x\,y\,z & .case\,x+y+z\,<...>\,of\,0.\,\lambda x.x\,|\,-.\star
\end{align*}

\end_inset


\end_layout

\begin_deeper
\begin_layout Itemize
has apparent type of 
\begin_inset Formula $\mathbb{N}\rightarrow\mathbb{N}$
\end_inset


\end_layout

\begin_layout Itemize
but after evaluation has apparent type 
\begin_inset Formula $case\,\{0,0\}+\{0,1\}+\{0,0\}\,of\,0.\,\mathbb{N}\rightarrow\mathbb{N}\,|\,-.\star$
\end_inset

 
\end_layout

\begin_layout Itemize
in this specific case the motive could produce a direct error but in the
 more general that is not possible,
\begin_inset Formula 
\begin{align*}
a:\mathbb{N}\vdash case\,\left(D\,0\,a\,0\,:T\,0\,a\,0\right) & ::T\,0\,0\,0\,<-:T\,x\,y\,z.\,case\,x+y+z\,of\,0.\,\mathbb{N}\rightarrow\mathbb{N}\,|\,-.\star>\,of\\
D\,x\,y\,z & .case\,x+y+z\,of\,0.\,\lambda x.x\,|\,-.\star
\end{align*}

\end_inset


\end_layout

\begin_layout Itemize
but after evaluation has apparent type 
\begin_inset Formula $case\,\{0,0\}+\{0,a\}+\{0,0\}\,of\,0.\,\mathbb{N}\rightarrow\mathbb{N}\,|\,-.\star$
\end_inset


\end_layout

\begin_layout Itemize
this suggests that the top of the casts need to have some 
\begin_inset Quotes eld
\end_inset

special
\begin_inset Quotes erd
\end_inset

 behavior that allows computation for the purposes of typing but retains
 the uncertainty if a term of that type is eliminated for instance 
\begin_inset Formula $case\,\{\underline{0},0\}+\{\underline{0},a\}+\{\underline{0},0\}\,of\,0.\,\mathbb{N}\rightarrow\mathbb{N}\,|\,-.\star$
\end_inset

 should in some way be equivalent to 
\begin_inset Formula $\{\mathbb{N}\rightarrow\mathbb{N},case\,\{0,0\}+\{0,a\}+\{0,0\}\,of\,0.\,\mathbb{N}\rightarrow\mathbb{N}\,|\,-.\star\}$
\end_inset


\end_layout

\end_deeper
\begin_layout Itemize
also the motive scrutinee is not necessarily type compatible as it was in
 the stack case
\end_layout

\begin_layout Standard
Currently this is the closest to the prototype implementation
\end_layout

\begin_layout Section
Proof summery
\end_layout

\begin_layout Standard
elaboration produces a well typed term
\end_layout

\begin_layout Standard
type soundness goes through as before but, all head constructors match or
 blame is available in an empty ctx
\end_layout

\begin_layout Standard

\end_layout

\begin_layout Section
TODO
\end_layout

\begin_layout Itemize
syntax and rules
\end_layout

\begin_layout Itemize
Example of why function types alone are underwhelming 
\end_layout

\begin_deeper
\begin_layout Itemize
pair,singleton
\end_layout

\begin_layout Itemize
walk through of various examples
\end_layout

\end_deeper
\begin_layout Itemize
theorem statements
\end_layout

\begin_deeper
\begin_layout Itemize
substitution!
\end_layout

\end_deeper
\begin_layout Itemize
proofs
\end_layout

\begin_deeper
\begin_layout Itemize
top level summery!!
\end_layout

\begin_layout Itemize
consistency is a little too restricted
\end_layout

\begin_layout Itemize
clean up, the first type cast is unneeded and dropping it might make induction
 easier?
\end_layout

\begin_layout Itemize
consider separating annotation evaluation and term evaluation
\end_layout

\end_deeper
\begin_layout Itemize
more specifics about var binding
\end_layout

\begin_deeper
\begin_layout Itemize
presented in an almost capture avoiding way
\end_layout

\begin_layout Itemize
more explicit about the connection to heterogeneous substitution
\end_layout

\end_deeper
\begin_layout Itemize
exposition
\end_layout

\begin_layout Itemize
archive
\end_layout

\begin_layout Itemize
paper target
\end_layout

\begin_layout Section
Scratch
\end_layout

\begin_layout Subsection
pretending 
\begin_inset Formula $\lambda x.x=_{\mathbb{B}_{c}\rightarrow\mathbb{B}_{c}}\lambda x.true_{c}$
\end_inset


\end_layout

\begin_layout Standard
a difference can be observed via
\end_layout

\begin_layout Standard
\begin_inset Formula $\left(\lambda pr:\left(\varPi C:\left(\left(\mathbb{B}_{c}\rightarrow\mathbb{B}_{c}\right)\rightarrow\star\right).C\,\left(\lambda x.x\right)\rightarrow C\,\left(\lambda x.true_{c}\right)\right).pr\,\left(\lambda f:\mathbb{B}_{c}\rightarrow\mathbb{B}_{c}.f\,\star\,\star\,\perp\right)\,\perp\qquad:\lnot\lambda x.x=_{\mathbb{B}_{c}\rightarrow\mathbb{B}_{c}}\lambda x.true_{c}\right)refl_{\lambda x.x:\mathbb{B}_{c}\rightarrow\mathbb{B}_{c}}$
\end_inset


\end_layout

\begin_layout Standard
...
\end_layout

\begin_layout Standard
\begin_inset Formula $S_{a:A}\coloneqq a$
\end_inset


\end_layout

\begin_layout Standard
\begin_inset Formula $S_{a:A}\coloneqq\varPi P:A\rightarrow\star.P\,a\rightarrow\star$
\end_inset


\end_layout

\begin_layout Standard
..
\end_layout

\begin_layout Standard
\begin_inset Formula $\lnot\star=_{\star}\left(\star\rightarrow\star\right)$
\end_inset

 is provable?
\end_layout

\begin_layout Standard
\begin_inset Formula $\lambda pr:\left(\varPi C:\left(\star\rightarrow\star\right).C\,Unit\rightarrow C\,\perp\right).pr\,\left(\lambda x.x\right)\,\perp\qquad:\lnot\star=_{\star}\perp$
\end_inset


\end_layout

\begin_layout Standard
.
\end_layout

\begin_layout Standard
evaluating 
\begin_inset Formula $\lnot true_{c}=_{\mathbb{B}_{c}}false_{c}$
\end_inset

 with an incorrect proof.
\end_layout

\begin_layout Standard
\begin_inset Formula $\left(\lambda pr:\left(\varPi C:\left(\mathbb{B}_{c}\rightarrow\star\right).C\,true_{c}\rightarrow C\,false_{c}\right).pr\,\left(\lambda b:\mathbb{B}_{c}.b\,\star\,Unit\,\perp\right)\,tt\qquad:\lnot true_{c}=_{\mathbb{B}_{c}}false_{c}\right)refl_{true_{c}:\mathbb{B}_{c}}$
\end_inset


\end_layout

\begin_layout Standard
is elaborated to
\end_layout

\begin_layout Standard
\begin_inset Formula $\left(\lambda pr:\left(\varPi C:\left(\mathbb{B}_{c}\rightarrow\star\right).C\,true_{c}\rightarrow C\,false_{c}\right).pr\,\left(\lambda b:\mathbb{B}_{c}.b\,\star\,Unit\,\perp\right)\,tt\qquad:\lnot true_{c}=_{\mathbb{B}_{c}}false_{c}\right)\left(refl_{true_{c}:\mathbb{B}_{c}}::true_{c}=_{\mathbb{B}_{c}}true_{c}=_{l}true_{c}=_{\mathbb{B}_{c}}false_{c}\right)$
\end_inset


\end_layout

\begin_layout Standard
\begin_inset Formula $\rightsquigarrow\left(\left(refl_{true_{c}:\mathbb{B}_{c}}::true_{c}=_{\mathbb{B}_{c}}true_{c}=_{l}true_{c}=_{\mathbb{B}_{c}}false_{c}\right)\,\left(\lambda b:\mathbb{B}_{c}.b\,\star\,Unit\,\perp\right)\,tt\qquad:\perp\right)$
\end_inset


\end_layout

\begin_layout Standard
de-sugars to
\end_layout

\begin_layout Standard
\begin_inset Formula $\left(\left(\left(\lambda C:\left(\mathbb{B}_{c}\rightarrow\star\right).\lambda x:C\,true_{c}.x\right)::\left(\varPi C:\left(\mathbb{B}_{c}\rightarrow\star\right).C\,true_{c}\rightarrow C\,true_{c}\right)=_{l}\left(\varPi C:\left(\mathbb{B}_{c}\rightarrow\star\right).C\,true_{c}\rightarrow C\,false_{c}\right)\right)\,\left(\lambda b:\mathbb{B}_{c}.b\,\star\,Unit\,\perp\right)\,tt\qquad:\perp\right)$
\end_inset


\end_layout

\begin_layout Standard
\begin_inset Formula $\rightsquigarrow\left(\left(\left(\lambda x:\left(true_{c}\,\star\,Unit\,\perp\right).x\right)::\left(true_{c}\,\star\,Unit\,\perp\rightarrow true_{c}\,\star\,Unit\,\perp\right)=_{l,bod}\left(\left(true_{c}\,\star\,Unit\,\perp\right)\rightarrow false_{c}\,\star\,Unit\,\perp\right)\right)\,tt\qquad:\perp\right)$
\end_inset


\end_layout

\begin_layout Standard
def eq to
\end_layout

\begin_layout Standard
\begin_inset Formula $\left(\left(\left(\lambda x:Unit.x\right)::\left(Unit\rightarrow Unit\right)=_{l,bod}\left(Unit\rightarrow\perp\right)\right)\,tt\qquad:\perp\right)$
\end_inset


\end_layout

\begin_layout Standard
\begin_inset Formula $\rightsquigarrow\left(tt::Unit=_{l,bod.bod}\perp\qquad:\perp\right)$
\end_inset


\end_layout

\begin_layout Standard
note that the program has not yet 
\begin_inset Quotes eld
\end_inset

gotten stuck
\begin_inset Quotes erd
\end_inset

.
 to exercise this error, 
\begin_inset Formula $\perp$
\end_inset

 must be eliminated, this can be done by tying to summon another type by
 applying it to 
\begin_inset Formula $\perp$
\end_inset

 
\end_layout

\begin_layout Standard
\begin_inset Formula $\left(tt::Unit=_{l,bod.bod}\perp\qquad:\perp\right)\perp\qquad:\perp$
\end_inset


\end_layout

\begin_layout Standard

\series bold
bad attempt
\end_layout

\begin_layout Standard
\begin_inset Formula $\left(tt::Unit=_{l,bod.bod}\perp\qquad:\perp\right)\perp\qquad:\perp$
\end_inset


\end_layout

\begin_layout Standard
de-sugars to
\end_layout

\begin_layout Standard
\begin_inset Formula $\left(\left(\lambda A:\star.\lambda a:A.a\right)::\varPi A:\star.A\rightarrow A=_{l,bod.bod}\varPi x:\star.x\qquad:\perp\right)\perp\qquad:\perp$
\end_inset


\end_layout

\begin_layout Standard
\begin_inset Formula $\rightsquigarrow\left(.\lambda a.a\right)::\perp\rightarrow\perp=_{l,bod.bod.bod}\perp\qquad:\perp$
\end_inset


\end_layout

\begin_layout Standard
but still
\end_layout

\begin_layout Standard
\begin_inset Formula $\left(\left(.\lambda a.a\right)::\perp\rightarrow\perp=_{l,bod.bod.bod}\perp\qquad:\perp\right)\star$
\end_inset


\end_layout

\begin_layout Standard
\begin_inset Formula $\left(\left(.\lambda a.a\right)::\perp\rightarrow\perp=_{l,bod.bod.bod}\varPi x:\star.x\qquad:\perp\right)\star$
\end_inset


\end_layout

\begin_layout Standard
\begin_inset Formula $\left(\star::\star=_{l,bod.bod.bod.aty}\perp=_{l,bod.bod.bod.bod}\star\right)$
\end_inset


\end_layout

\begin_layout Standard

\series bold
bad attempt
\end_layout

\begin_layout Standard
\begin_inset Formula $\left(tt::Unit=_{l,bod.bod}\perp\qquad:\perp\right)\star\rightarrow\star\qquad:\star\rightarrow\star$
\end_inset


\end_layout

\begin_layout Standard
de-sugars to
\end_layout

\begin_layout Standard
\begin_inset Formula $\left(\left(\lambda A:\star.\lambda a:A.a\right)::\varPi A:\star.A\rightarrow A=_{l,bod.bod}\varPi x:\star.x\qquad:\perp\right)\star\rightarrow\star\qquad:\star\rightarrow\star$
\end_inset


\end_layout

\begin_layout Standard
\begin_inset Formula $\rightsquigarrow\left(.\lambda a.a\right)::\left(\star\rightarrow\star\right)\rightarrow\left(\star\rightarrow\star\right)=_{l,bod.bod.bod}\star\rightarrow\star\qquad:\star\rightarrow\star$
\end_inset


\end_layout

\begin_layout Standard
not yet 
\begin_inset Quotes eld
\end_inset

gotten stuck
\begin_inset Quotes erd
\end_inset


\end_layout

\begin_layout Standard
\begin_inset Formula $\rightsquigarrow\left(.\lambda a.a\right)::\left(\star\rightarrow\star\right)\rightarrow\left(\star\rightarrow\star\right)=_{l,bod.bod.bod}\star\rightarrow\star\qquad:\star\rightarrow\star$
\end_inset


\end_layout

\begin_layout Standard

\series bold
bad attempt
\end_layout

\begin_layout Standard
de-sugars to
\end_layout

\begin_layout Standard
\begin_inset Formula $\left(\left(\lambda A:\star.\lambda a:A.a\right)::\varPi A:\star.A\rightarrow A=_{l,bod.bod}\varPi x:\star.x\qquad:\perp\right)\mathbb{B}_{c}\qquad:\mathbb{B}_{c}$
\end_inset


\end_layout

\begin_layout Standard
\begin_inset Formula $\rightsquigarrow\left(.\lambda a:\mathbb{B}_{c}.a\right)::\mathbb{B}_{c}\rightarrow\mathbb{B}_{c}=_{l,bod.bod.bod}\mathbb{B}_{c}\qquad:\mathbb{B}_{c}$
\end_inset


\end_layout

\begin_layout Standard
attempt
\end_layout

\begin_layout Standard
\begin_inset Formula $\left(tt::Unit=_{l,bod.bod}\perp\qquad:\perp\right)\mathbb{B}_{c}\qquad:\mathbb{B}_{c}$
\end_inset


\end_layout

\begin_layout Standard
de-sugars to
\end_layout

\begin_layout Standard
\begin_inset Formula $\left(\left(\lambda A:\star.\lambda a:A.a\right)::\varPi A:\star.A\rightarrow A=_{l,bod.bod}\varPi x:\star.x\qquad:\perp\right)\mathbb{B}_{c}\qquad:\mathbb{B}_{c}$
\end_inset


\end_layout

\begin_layout Standard
\begin_inset Formula $\rightsquigarrow\left(.\lambda a:\mathbb{B}_{c}.a\right)::\mathbb{B}_{c}\rightarrow\mathbb{B}_{c}=_{l,bod.bod.bod}\mathbb{B}_{c}\qquad:\mathbb{B}_{c}$
\end_inset


\end_layout

\begin_layout Standard
.
\end_layout

\begin_layout Standard
.
\end_layout

\begin_layout Standard
.
\end_layout

\begin_layout Standard
.
\end_layout

\begin_layout Standard
.
\end_layout

\begin_layout Standard
.
\end_layout

\end_body
\end_document
